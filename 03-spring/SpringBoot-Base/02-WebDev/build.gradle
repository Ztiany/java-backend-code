plugins {
    id 'org.springframework.boot' version '2.6.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'me.ztiany.springboot'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    //测试
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'

    //lombok【需要装上 lombok 插件】
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //配置助手
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    //如果配置静态资源前缀，则需要添加一个模板，具体参考 WelcomePageHandlerMapping 类的实现。
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    //web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //message converter
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml")

    //database
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'mysql:mysql-connector-java'
    implementation 'com.alibaba:druid-spring-boot-starter:1.2.8'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //监控
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
}

tasks.named('test') {
    useJUnitPlatform()
}
